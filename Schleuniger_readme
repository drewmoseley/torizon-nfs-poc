This directory contains artifacts for building your own customized
torizoncore-lite images (both an initial version and an updated version) for an
apalis-imx8 (application board) and colibri-imx7 (RT board) modules using
torizoncore-builder(TCB).  More details regarding TCB workflow and commands
manual can be found here:
https://developer.toradex.com/torizon/in-depth/torizoncore-builder/

Details regarding the content inside each directories:

Please note that you need to build provisioned images so that they will be compatible
with offline updates. For this you need to add provisioning data (shared-data.tar.gz)
into each of the directories before building. Details regarding provisioning data are
here:
   https://developer.toradex.com/torizon/working-with-torizon/production-programming-in-torizon/#getting-provisioning-data

The path to the provisioning data is provided in the tcbuild.yaml file.

Details for building a custom torizon-core-lite image are here:
   https://developer.toradex.com/torizon/in-depth/build-torizoncore-from-source-with-yocto-projectopenembedded/#torizoncore-distro

apalis_imx8_v1 contains the files for building the initial image version which also acts as an NFS server. 
apalis_imx8_v1			
├── changes			# changes to be added on top of input image
│   ├── srv			# Add a root directory for nfs volume
│   │   └── nfs
│   └── usr			
│       └── etc
│           ├── exports	# exports file to grant access to NFS clients
│           └── sota
│               └── conf.d
│                   └── 100-offline-updates.toml		# config file for secure offline update with pointer to an external USB media.
├── tcbuild.yaml	# configuration for adding the customizations
└── torizon-core-lite-apalis-imx8-Tezi_5.7.1-devel-20220920131951+build.0.tar	# custom tc lite image built from yocto layers with additional packages for NFS and AutoFS

THe next step is to build the image using the "torizoncore-builder build" command.
This will create an output directory (named tezi in this setup) containingh thee
custom Tezi image. You can install this image on your device using Toradex Easy
Installer by hosting it on a local web server:
    https://developer.toradex.com/easy-installer/in-depth/toradex-easy-installer-detailed-manual/#feeds-f

colibri_imx7_v1 follows a similar file structure, except for the config files for NFS client. 
colibri_imx7_v1
├── changes
│   ├── srv
│   │   └── nfs
│   └── usr
│       └── etc
│           ├── sota
│           │   └── conf.d
│           │       └── 100-offline-updates.toml	# config file for secure offline update with pointer to the NFS volume.
├── tcbuild.yaml
└── torizon-core-lite-colibri-imx7-emmc-Tezi_5.7.1-devel-20220924102833+build.0.tar

You have to add provisioning data into colibri_imx7_v1 and build the Tezi image using
the "torizoncore-builder build" command. Install this image on your colibri-imx7 device
using Toradex Easy Installer.

The colibri_imx7_update folder contains the files for creating the update image
using torizoncore-builder.

colibri_imx7_update
├── changes
│   ├── srv
│   │   └── nfs
│   └── usr
│       └── etc
│           ├── sota
│           │   └── conf.d
│           │       └── 100-offline-updates.toml		# config file for secure offline update with pointer to the NFS volume.
├── tcbuild.yaml
├── torizon-core-lite-colibri-imx7-emmc-Tezi_5.7.1-devel-20220929182741+build.0.tar

Build the output image after adding provisioning data into this directory.

Next, you need to create an update lockbox for this image using our OTA platform.
This lockbox is used for offline updates. Details for creating lockboes are here:
    https://developer.toradex.com/torizon/how-to/torizon-updates/first-steps-with-secure-offline-updates/#uploading-software-packages-to-torizon-platform

apalis_imx8_update has files for its own update and for the update of colibri_imx7_update packed in a root directory.
apalis_imx8_update
├── changes
│   ├── srv
│   │   └── nfs
│   └── usr
│       └── etc
│           ├── exports
│           └── sota
│               └── conf.d
│                   └── 100-offline-updates.toml 	# config file for secure offline update with pointer to an external USB media.
├── tcbuild.yaml
└── torizon-core-lite-apalis-imx8-Tezi_5.7.1-devel-20220920131951+build.0.tar

Build the image and create an update lockbox for this image. You just need to
copy the update directory into a USB and insert it into your device. It will
automatically start the update process.

Once the boards are booted, copy the update lockbox (named update) for
colibri_imx7_update to your board.

Example:
user@dev_pc:$ sudo scp -r /path/colibri_imx7_update/update torizon@<apalis_ip_address>:/nfs/

The colibri device running the initial version at this point will pull its
update from this NFS volume (since it is offline update is pointing to the NFS
mount volume). Wait for the device to finish its update. You can verify the
update using the command "ostree admin status"